import java.util.*;

class Solution {

	private static HashMap<String, Integer> map = new HashMap<>();

	public String[] solution(String[] orders, int[] course) {
		ArrayList<String> answer = new ArrayList<>();

		// orders 정렬
		for (int i = 0; i < orders.length; i++) {
			char[] chars = orders[i].toCharArray();
			Arrays.sort(chars);
			for (int j = 0; j < course.length; j++) {
				comb(chars, course[j], 0, 0, "");
			}
		}

		// 그 횟수 중 가장 큰 값!

		int[] maxcnt = new int[course[course.length - 1] + 1];
		for (String key : map.keySet()) {

			if (map.get(key) < 2)
				continue;

			maxcnt[key.length()] = Math.max(maxcnt[key.length()], map.get(key));

		}

		for (int i = 0; i < maxcnt.length; i++) {
			if (maxcnt[i] == 0)
				continue;
			for (String key : map.keySet()) {
				if (map.get(key) == maxcnt[i] && key.length() == i) {
					answer.add(key);
				}
			}

		}

		Collections.sort(answer);
		return answer.toArray(new String[0]);
	}

	private static void comb(char[] orders, int max, int cnt, int start, String str) {
		if (max == cnt) {
			if (!map.containsKey(str)) {
				map.put(str, 1);
			} else {
				map.put(str, map.get(str) + 1);
			}
			return;
		}
		for (int i = start; i < orders.length; i++) {
			comb(orders, max, cnt + 1, i + 1, str + orders[i]);
		}

	}
}
